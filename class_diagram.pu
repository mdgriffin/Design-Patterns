@startuml
package com.mgriffin <<Node>> {

package simplestatengine <<Node>> {

Interface StateChangeObserver {
    void onStateChange(Enum state);
}

Class StateEngine {
    -EnumSet states
    -EnumSet events
    -Enum currentState
    -Map<Enum, Map<Enum, Enum>> transitions

    -StateEngine (EnumSet states, EnumSet events, Enum startState, Map<Enum, Map<Enum, Enum>> transitions)

    +Enum getCurrentState()
    +void performAction()
    +addObserver(StateChangeObserver observer);
    +addObserver(Enum state, StateChangeObserver observer
}

class StateEngineBuilder {
    -EnumSet states
    -EnumSet events
    -Enum startStat
    -Map<Enum, Map<Enum, Enum>> transitions = new HashMap<>()

    +StateEngineBuilder();

    +setStates(EnumSet states)
    +setEvents(EnumSet events )
    +setStartState(EnumSet, states);
    +StateEngineBuilder addTransition (Enum startState, Enum endState, Enum event)
    +StateEngine build()
}

StateEngine+--StateEngineBuilder

}

package coffeemat <<Node>> {
    class CoffeeMaker {
        -List<CoffeeOrder> orders
        COffeeMaker()
        +addOrder(CoffeeOrder order)
    }

    class CoffeeOrder {
        -StateEngine state
        -Customer customer
        -CoffeeType coffeeType
        -CoffeeSize coffeeSize
        -List<CoffeeCondiments> condiments

        -CoffeeOrder(Customer customer)

        +getOrderState():OrderState
    }

    class CoffeeOrderBuilder {
        -StateEngine state
        -Customer customer
        -CoffeeType coffeeType
        -CoffeeSize coffeeSize
        -List<CoffeeCondiments> condiments

        +CoffeeOrderBuilder ()

        +setCustomer(Customer customer)
        +setType (CoffeeType coffeeType)
        +setSize (CoffeeSize coffeeSize);
        +addCondiment (CoffeeCondiment condiment)
    }

    class Customer {
        -String name
        +Customer(String name)
        +String getName()
    }

    enum OrderStates

    enum OrderEvents

    interface Billable {
        double getPrice();
    }

    enum CoffeeSize

    enum CoffeeType

    enum CoffeeCondiment

    CoffeeMaker <.. CoffeeOrder
    CoffeeOrder ..> Customer
    CoffeeOrder ..> CoffeeType
    CoffeeOrder ..> CoffeeSize
    CoffeeOrder ..> CoffeeCondiment
    CoffeeOrder ..> OrderStates
    CoffeeOrder ..> OrderEvents
    CoffeeOrder <.. StateEngine
    CoffeeOrderBuilder ..> Customer
    CoffeeOrderBuilder ..> CoffeeType
    CoffeeOrderBuilder ..> CoffeeSize
    CoffeeOrderBuilder ..> CoffeeCondiment
    CoffeeType ..|> Billable
    CoffeeCondiment ..|> Billable
    CoffeeOrderBuilder --+ CoffeeOrder
}

}
@enduml