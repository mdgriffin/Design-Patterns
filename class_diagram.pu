@startuml
Interface StateChangeObserver {
    void onStateChange(Enum state);
}

Class StateEngine {
    -EnumSet states;
    -EnumSet events;
    -Enum currentState
    -Map<Enum, Map<Enum, Enum>> transitions

    -StateEngine (EnumSet states, EnumSet events, Enum startState, Map<Enum, Map<Enum, Enum>> transitions)

    +Enum getCurrentState()
    +void performAction()
    +addObserver(StateChangeObserver observer);
    +addObserver(Enum state, StateChangeObserver observer
}

class StateEngineBuilder {
    -EnumSet states;
    -EnumSet events;
    -Enum startState;
    -Map<Enum, Map<Enum, Enum>> transitions = new HashMap<>();;

    +StateEngineBuilder();

    +setStates(EnumSet states);
    +setEvents(EnumSet events );
    +setStartState(EnumSet, states);
    +StateEngineBuilder addTransition (Enum startState, Enum endState, Enum event);
    +StateEngine build();
}

StateEngine+----StateEngineBuilder
@enduml